/**
 *
 * @author Bibek Khatri, Sujal Maharjan, Ashwin Newpane, Saurav KC
 */

package PCPart;

import java.util.ArrayList;
import java.awt.Desktop;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.util.logging.*;

public class Interface extends javax.swing.JFrame {

    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrpWarn = new javax.swing.ButtonGroup();
        panelTop = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        panelLeft = new javax.swing.JPanel();
        lblComName = new javax.swing.JLabel();
        txtComName = new javax.swing.JTextField();
        lblProdType = new javax.swing.JLabel();
        cmbProdType = new javax.swing.JComboBox<>();
        lblProdName = new javax.swing.JLabel();
        txtProdName = new javax.swing.JTextField();
        lblWarn = new javax.swing.JLabel();
        rbtnWarStan = new javax.swing.JRadioButton();
        rbtnWarPre = new javax.swing.JRadioButton();
        lblWuan = new javax.swing.JLabel();
        txtQuan = new javax.swing.JTextField();
        lblHomeDel = new javax.swing.JLabel();
        chbxHomeDel = new javax.swing.JCheckBox();
        lblPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        panelRight = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        cmbProdTypeSearch = new javax.swing.JComboBox<>();
        btnDelete = new javax.swing.JButton();
        btnComSearch = new javax.swing.JButton();
        btnProdTypeSearch = new javax.swing.JButton();
        btnPriceSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMain = new javax.swing.JTable();
        btnProdName = new javax.swing.JButton();
        btnQuan = new javax.swing.JButton();
        lblSearchTxt = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        lblEmpty = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        mitmFile = new javax.swing.JMenuItem();
        mitmExit = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        mitmHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PC Parts Information System");
        setSize(new java.awt.Dimension(930, 601));

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("PC Parts Information System");
        lblTitle.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout panelTopLayout = new javax.swing.GroupLayout(panelTop);
        panelTop.setLayout(panelTopLayout);
        panelTopLayout.setHorizontalGroup(
            panelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 890, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelTopLayout.setVerticalGroup(
            panelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTopLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelLeft.setBackground(new java.awt.Color(255, 255, 255));

        lblComName.setText("Company Name");

        lblProdType.setText("Product Type");

        cmbProdType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CPU", "Motherboard", "Memory", "Graphics Card", "Storage", "Case", "Power Supply", "Cooler", "Monitor" }));
        cmbProdType.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblProdName.setText("Product Name");

        lblWarn.setText("Warranty");

        bgrpWarn.add(rbtnWarStan);
        rbtnWarStan.setText("Standard");

        bgrpWarn.add(rbtnWarPre);
        rbtnWarPre.setText("Premium");

        lblWuan.setText("Quantity");

        lblHomeDel.setText("Home Delievery");

        chbxHomeDel.setText("Eligible for Home Delivery");

        lblPrice.setText("Price");

        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLeftLayout = new javax.swing.GroupLayout(panelLeft);
        panelLeft.setLayout(panelLeftLayout);
        panelLeftLayout.setHorizontalGroup(
            panelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtComName)
                    .addComponent(cmbProdType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtProdName)
                    .addGroup(panelLeftLayout.createSequentialGroup()
                        .addComponent(rbtnWarStan, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rbtnWarPre, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblHomeDel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelLeftLayout.createSequentialGroup()
                        .addGroup(panelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chbxHomeDel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblComName)
                            .addComponent(lblProdType)
                            .addComponent(lblProdName)
                            .addComponent(lblWarn)
                            .addComponent(lblWuan)
                            .addComponent(txtQuan, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPrice)
                            .addGroup(panelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLeftLayout.createSequentialGroup()
                                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelLeftLayout.setVerticalGroup(
            panelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblComName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtComName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblProdType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbProdType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblProdName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtProdName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblWarn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnWarStan)
                    .addComponent(rbtnWarPre))
                .addGap(18, 18, 18)
                .addComponent(lblWuan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtQuan, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblHomeDel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbxHomeDel)
                .addGap(18, 18, 18)
                .addComponent(lblPrice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnClear))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelRight.setBackground(new java.awt.Color(255, 255, 255));

        txtSearch.setToolTipText("");

        cmbProdTypeSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CPU", "Motherboard", "Memory", "Graphics Card", "Storage", "Case", "Power Supply", "Cooler", "Monitor" }));

        btnDelete.setText("Delete Data");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnComSearch.setText("Company");
        btnComSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComSearchActionPerformed(evt);
            }
        });

        btnProdTypeSearch.setText("Product Type");
        btnProdTypeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProdTypeSearchActionPerformed(evt);
            }
        });

        btnPriceSearch.setText("Price");
        btnPriceSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriceSearchActionPerformed(evt);
            }
        });

        tblMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product No.", "Company", "Product Type", "Product Name", "Warranty", "Home Delivery", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblMain.setShowGrid(false);
        tblMain.getTableHeader().setReorderingAllowed(false);
        tblMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMainMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMain);
        if (tblMain.getColumnModel().getColumnCount() > 0) {
            tblMain.getColumnModel().getColumn(0).setMinWidth(60);
        }

        btnProdName.setText("Product Name");
        btnProdName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProdNameActionPerformed(evt);
            }
        });

        btnQuan.setText("Quantity");
        btnQuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuanActionPerformed(evt);
            }
        });

        lblSearchTxt.setText("Search :");

        lblSearch.setText("Search By :");

        lblEmpty.setText("              ");

        javax.swing.GroupLayout panelRightLayout = new javax.swing.GroupLayout(panelRight);
        panelRight.setLayout(panelRightLayout);
        panelRightLayout.setHorizontalGroup(
            panelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(panelRightLayout.createSequentialGroup()
                        .addGroup(panelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelRightLayout.createSequentialGroup()
                                .addComponent(lblSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnComSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnProdTypeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelRightLayout.createSequentialGroup()
                                .addComponent(lblSearchTxt)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearch)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelRightLayout.createSequentialGroup()
                                .addComponent(btnProdName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnQuan, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbProdTypeSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPriceSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)))
                    .addGroup(panelRightLayout.createSequentialGroup()
                        .addComponent(lblEmpty)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelRightLayout.setVerticalGroup(
            panelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRightLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(panelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbProdTypeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchTxt))
                .addGap(18, 18, 18)
                .addComponent(lblEmpty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnComSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProdTypeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProdName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuan, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearch)
                    .addComponent(btnPriceSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuFile.setText("File");

        mitmFile.setText("Open File");
        mitmFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitmFileActionPerformed(evt);
            }
        });
        menuFile.add(mitmFile);

        mitmExit.setText("Exit");
        mitmExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitmExitActionPerformed(evt);
            }
        });
        menuFile.add(mitmExit);

        menuBar.add(menuFile);

        menuHelp.setText("Help");

        mitmHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        mitmHelp.setText("Open User Manual");
        mitmHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitmHelpActionPerformed(evt);
            }
        });
        menuHelp.add(mitmHelp);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelTop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelLeft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //-------------------------------MAIN CODE STARTS BELOW-------------------------------//

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        resetData();     //Clears all values in fields, as well as reset global values to default
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (tableImported)  //If table has been imported
            addData();          //Adds data from the form into the table
        else
            JOptionPane.showMessageDialog(null,"Table is not Imported yet","Open File",0);
    }//GEN-LAST:event_btnAddActionPerformed

    private void tblMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMainMouseClicked
        int arrIndex = tblMain.getSelectedRow();    //Get index of currently selected row
        
        this.arrIndex = arrIndex;                   //Equal the value of the global arrIndex to the local one
        
        tableSelected = true;
        
        PCComponent selRow = pcComp.get(arrIndex);
        prodNo = selRow.prodNo;                     //Get current Product No. to use in updating the table
        
        DefaultTableModel mdlMain = (DefaultTableModel) tblMain.getModel();
        
        txtComName.setText(mdlMain.getValueAt(arrIndex, 1).toString());     //Set values of text in text box to the one selected in the table
        txtProdName.setText(mdlMain.getValueAt(arrIndex, 3).toString());
        txtQuan.setText(mdlMain.getValueAt(arrIndex, 6).toString());
        txtPrice.setText(mdlMain.getValueAt(arrIndex, 7).toString());
        
        cmbProdType.setSelectedItem(mdlMain.getValueAt(arrIndex, 2).toString());      //Set value of combo box to the same as the one selected
        
        if(mdlMain.getValueAt(arrIndex, 4).toString().equals("Standard"))   //Set values of radio buttons to that of the one selected
            rbtnWarStan.setSelected(true);
        else
            rbtnWarPre.setSelected(true);
        
        if(mdlMain.getValueAt(arrIndex, 5).toString().equals("Eligible"))   //Set values of check box to the same as that of the one selected
            chbxHomeDel.setSelected(true);
        else
            chbxHomeDel.setSelected(false);
        
        btnAdd.setText("UPDATE");
        btnClear.setText("CANCEL");
    }//GEN-LAST:event_tblMainMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        pcComp.remove(arrIndex);            //Remove selected row from array
        resetTable();
        updateTable(pcComp);                //Update table to show changes
        
        resetData();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnProdTypeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProdTypeSearchActionPerformed
        searchLinear(2);    //Linear search through the Prod Type column
    }//GEN-LAST:event_btnProdTypeSearchActionPerformed

    private void btnComSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComSearchActionPerformed
        searchLinear(1);    //Linear search through the Company column
    }//GEN-LAST:event_btnComSearchActionPerformed

    private void btnProdNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProdNameActionPerformed
        searchLinear(3);    //Linear search through the Prod Name column
    }//GEN-LAST:event_btnProdNameActionPerformed

    private void btnPriceSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriceSearchActionPerformed
        searchBinary(true); //Binary Search through the Price column
    }//GEN-LAST:event_btnPriceSearchActionPerformed

    private void btnQuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuanActionPerformed
        searchBinary(false);//Binary search through the Quantity column
    }//GEN-LAST:event_btnQuanActionPerformed

    private void mitmExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitmExitActionPerformed
        System.exit(0);     //Close the Program
    }//GEN-LAST:event_mitmExitActionPerformed

    private void mitmFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitmFileActionPerformed
        openTable();        //Opens the External file
    }//GEN-LAST:event_mitmFileActionPerformed

    private void mitmHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitmHelpActionPerformed
        try {
            File file=new File("src/main/java/PCPart/User_Manual_for_PC_Parts_Information_System.pdf");
            Desktop.getDesktop().open(file);            //Opens the file
        }
        catch (Exception ex) {                  //If file is missing
            JOptionPane.showMessageDialog(null, "File not Found", "Open File", 0);
        }
    }//GEN-LAST:event_mitmHelpActionPerformed

    private void addData(){                 //Takes the value from the form and adds a row in the table
        //Declaring and assigning values to Strings to be inserted into table
        try{
            String comName = txtComName.getText();
            String prodName = txtProdName.getText();
            String quan = txtQuan.getText();
            String price = txtPrice.getText();
            String prodType = cmbProdType.getSelectedItem().toString();
            String homeDel;
            String warrn;
            
            //Catch empty text boxes
            if(comName.equals("")||prodName.equals("")||quan.equals("")||price.equals(""))
                throw new Exception();
            
            //Catch non-number values in numeric fields
            Double.parseDouble(price);
            Integer.parseInt(quan);
            
            //Catch negative numbers
            if(Double.parseDouble(price)<0||Integer.parseInt(quan)<0)
                throw new NullPointerException();

            //Checking result for Radio Button
            if(rbtnWarStan.isSelected())
                warrn="Standard";
            else if(rbtnWarPre.isSelected())
                warrn="Premium";
            else
                throw new Exception();
        
            //Checking result for Check Box
            if(chbxHomeDel.isSelected())
                homeDel="Eligible";
            else
                homeDel="Not Eligible";
        
            //Assinging all values into the Table
        
            if(!tableSelected){  //If table entry is not selected, add this entry into the array
                prodNo = String.valueOf(pcComp.size() + 1);
                pcComp.add(new PCComponent(prodNo, comName, prodType, prodName, warrn, homeDel, quan, price));
                resetData();
            }
            else {               //If table entry is selected, update selected table entry
                pcComp.set(arrIndex, new PCComponent(prodNo, comName, prodType, prodName, warrn, homeDel, quan, price));
            }
            resetTable();
            updateTable(pcComp);
        }
        catch(NumberFormatException e){
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null,"Please type a valid number","Non-Numeric Value",0);
        }
        catch(NullPointerException e){
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null,"Values cannot be Negative","Negative Values",0);
        }
        catch(Exception e){
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null,"Type all the Required Values","Incomplete Values",0);
        }
    }
    
    private void searchLinear(int searchCol){           //Linear Search through the table for text value
        String searchResult = " Matched Results:\n\n";
        int total = 0;
        
        try{
            for (int i=0; i<tblMain.getRowCount();i++){
                if(searchCol==2){                                                               //For checking Combo box search
                    if(cmbProdTypeSearch.getSelectedItem().toString().contains(tblMain.getValueAt(i,searchCol).toString())){    //If the ProdType column in table contains the same value as the one chosen in the combo box
                        total++;
                        searchResult += String.valueOf(total) + ". " +                          //Add values to string for:
                            String.valueOf(tblMain.getValueAt(i, 1)) + " " +                        //Company
                            String.valueOf(tblMain.getValueAt(i, 3)) + ", " +                       //Prod Name
                            String.valueOf(tblMain.getValueAt(i, 4)) + " Warranty, " +              //Warranty
                            String.valueOf(tblMain.getValueAt(i, 5)) + " for Home Delevery, " +     //Home Del
                            "Price: " + String.valueOf(tblMain.getValueAt(i, 7)) + "\n";            //Price
                    }
                }
                else{                                                                           //For checking company and prod name search
                    if(txtSearch.getText().equals(""))
                        throw new NullPointerException();
                    else if(txtSearch.getText().contains(tblMain.getValueAt(i,searchCol).toString())){                           //If required column in the table contains same value as the one in the text field
                        total++;
                        searchResult += String.valueOf(total) + ". " +                          //Add values to string for:
                            String.valueOf(tblMain.getValueAt(i, 1)) + " " +                        //Company
                            String.valueOf(tblMain.getValueAt(i, 3)) + ", " +                       //Prod Name
                            String.valueOf(tblMain.getValueAt(i, 4)) + " Warranty, " +              //Warranty
                            String.valueOf(tblMain.getValueAt(i, 5)) + " for Home Delevery, " +     //Home Del
                            "Price: " + String.valueOf(tblMain.getValueAt(i, 7)) + "\n";            //Price
                    }
                }
            }
            if(total>0)
                JOptionPane.showMessageDialog(null,total + searchResult, "Search Results",1);
            else
                JOptionPane.showMessageDialog(null, "No Results Found", "Search Results",0);
        }
        catch (NullPointerException e){
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Please type a search query", "Empty Search Box", 0);
        }
    }
    
    private void searchBinary(boolean isPrice){         //Calls binSearch() to binary search through the table
        String searchQuery = txtSearch.getText();
        
        if(searchQuery.equals(""))
            JOptionPane.showMessageDialog(null, "Please type a search query", "Empty Search Box", 0);
        
        else{
            sort(isPrice);                                  //Sorts the table by the required column, by price if isPrice is true, by quantity if false
            
            double searchValue = Double.parseDouble(searchQuery);                                   //Parse Number to be searched
            PCComponent temp = bs.binSearch(pcComp, 0, pcComp.size()-1, searchValue, isPrice);      //Calls binSearch() and stores the first result in temp
            
            if (temp==null)                             //If no results found
                JOptionPane.showMessageDialog(null, "No Such Entry Found", "Search Results", 0);
            
            else                                        //Output the first result
                JOptionPane.showMessageDialog(null, "Search Result:\n\n" +
                                                    temp.comName + " " +
                                                    temp.prodName + "\n" +
                                                    temp.warrn + " Warranty\n" +
                                                    temp.homeDel + " for Home Delivery\nPrice: " +
                                                    temp.price, "Search Results", 1);
        }
    }
    
    private void sort(boolean sortPrice){                //Sort the table by the given row using selection sort
        PCComponent tempData;
        
        for(int i=0; i<pcComp.size(); i++){
            for(int j=1; j<pcComp.size(); j++){
                PCComponent first = pcComp.get(j),
                            second = pcComp.get(j-1);
                
                if(sortPrice){                  //Sorting Price
                    if(Double.parseDouble(first.price) < Double.parseDouble(second.price)){
                        tempData = pcComp.get(j);
                        pcComp.set(j, pcComp.get(j-1));
                        pcComp.set(j-1, tempData);
                    }
                }
                else{                           //Sorting Quantity
                    if(Integer.parseInt(first.quan) < Integer.parseInt(second.quan)){
                        tempData = pcComp.get(j);
                        pcComp.set(j, pcComp.get(j-1));
                        pcComp.set(j-1, tempData);
                    }
                }
            }
        }
        resetTable();
        updateTable(pcComp);
    }
    
    private void openTable(){                           //Reads from an external file and imports data into table
        String filePath = "src/main/java/PCPart/data.txt";      //Read the external file
        if (tableImported)              //If table is already imported
            JOptionPane.showMessageDialog(null,"Table has already been Imported","Open File",0);
        else{
            try{
                BufferedReader br = new BufferedReader(new FileReader(filePath));
                String line,    prodNo = new String(),
                                comName = new String(),
                                prodType = new String(),
                                prodName = new String(),
                                warrn = new String(),
                                homeDel = new String(),
                                quan = new String(),
                                price;
                while ((line = br.readLine()) != null){                 //While buffered text is not completed
                    String[] data = line.split(",");
                                       
                    for (int i=0; i<data.length; i++){                  //For every entry in data array
                    
                        switch (i % 8) {                                //Assigns value of current index in data to correct variable
                            case 0:                                     //if(i%8==0)
                                prodNo = data[i];
                                break;
                            case 1:                                     //if(i%8==1)
                                comName = data[i];
                                break;
                            case 2:                                     //if(i%8==2)
                                prodType = data[i];
                                break;
                            case 3:                                     //if(i%8==3)
                                prodName = data[i];
                                break;
                            case 4:                                     //if(i%8==4)
                                warrn = data[i];
                                break;
                            case 5:                                     //if(i%8==5)
                                homeDel = data[i];
                                break;
                            case 6:                                     //if(i%8==6)
                                quan = data[i];
                                break;
                            case 7:                                     //if(i%8==7)
                                price = data[i];
                                pcComp.add(new PCComponent(prodNo, comName, prodType, prodName, warrn, homeDel, quan, price));  //Assigns correct data to pcComp and creats new row on table
                        }
                    }
                }
                resetData();
                updateTable(pcComp);
            }
            catch (FileNotFoundException e){
                e.printStackTrace();
            }
            catch (IOException e){
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, e);
            }
            tableImported = true;
        }
    }
    
    private void resetData(){   //Resets all global values to default
        txtComName.setText("");         //Clearing Values on all text fields
        txtProdName.setText("");
        txtQuan.setText("");
        txtPrice.setText("");
        cmbProdType.setSelectedIndex(0);
        bgrpWarn.clearSelection();
        chbxHomeDel.setSelected(false);
        
        tblMain.clearSelection();       //De-select the selected row from table
        tableSelected = false;
        
        btnAdd.setText("ADD");          //Defaults text for add button if button text ever changed
        btnClear.setText("CLEAR");
        
        prodNo="";
        arrIndex=-1;
    }
    
    private void resetTable(){          //Clears the table
        DefaultTableModel mdlMain = (DefaultTableModel) tblMain.getModel();
        int rowNo = mdlMain.getRowCount();
        for(int i=0;i<rowNo;i++)
            mdlMain.removeRow(0);
    }
    
    private void updateTable(ArrayList<PCComponent> pcComp){    //Change Value on table to the one on the global pcComp array
        DefaultTableModel mdlMain = (DefaultTableModel) tblMain.getModel();
        for(int i=0;i<pcComp.size();i++)
        {
            PCComponent data = pcComp.get(i);
            Object[] obj = new Object[]{i+1, data.comName, data.prodType, data.prodName, data.warrn, data.homeDel, data.quan, data.price};
            mdlMain.addRow(obj);
        }
    }
    
    //Variables that need to be changed and reset multiple times
    private ArrayList<PCComponent> pcComp = new ArrayList<>();      //Array containing all table data
    private boolean tableSelected = false;                          //Is an entry on table selected? If yes, this is used to change add button to update button
    private String prodNo;                                          //Product No. variable for array
    private int arrIndex=-1;                                        //Currently selected array index in table
    private BinSearch bs = new BinSearch();                         //Create an object of class BinSearch for Binary Search
    
    //Variables that need to change only once
    private boolean tableImported = false;                          //Changes to true when the file is opened
    
    //-------------------------------END OF MAIN CODE-------------------------------//
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrpWarn;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnComSearch;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnPriceSearch;
    private javax.swing.JButton btnProdName;
    private javax.swing.JButton btnProdTypeSearch;
    private javax.swing.JButton btnQuan;
    private javax.swing.JCheckBox chbxHomeDel;
    private javax.swing.JComboBox<String> cmbProdType;
    private javax.swing.JComboBox<String> cmbProdTypeSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblComName;
    private javax.swing.JLabel lblEmpty;
    private javax.swing.JLabel lblHomeDel;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblProdName;
    private javax.swing.JLabel lblProdType;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblSearchTxt;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblWarn;
    private javax.swing.JLabel lblWuan;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem mitmExit;
    private javax.swing.JMenuItem mitmFile;
    private javax.swing.JMenuItem mitmHelp;
    private javax.swing.JPanel panelLeft;
    private javax.swing.JPanel panelRight;
    private javax.swing.JPanel panelTop;
    private javax.swing.JRadioButton rbtnWarPre;
    private javax.swing.JRadioButton rbtnWarStan;
    private javax.swing.JTable tblMain;
    private javax.swing.JTextField txtComName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtProdName;
    private javax.swing.JTextField txtQuan;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}